/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 15:24:55 GMT 2020
 */

package ch.lambdaj.function.aggregate;

import org.junit.Test;
import static org.junit.Assert.*;
import ch.lambdaj.function.aggregate.Max;
import ch.lambdaj.function.aggregate.Min;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Chooser_ESTest extends Chooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Min<Integer> min0 = new Min<Integer>();
      Integer integer1 = new Integer(1539);
      Comparable<Integer> comparable0 = min0.aggregate((Comparable<Integer>) integer1, (Comparable<Integer>) integer0);
      assertEquals(0, comparable0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Max<Integer> max0 = new Max<Integer>();
      Integer integer0 = new Integer(0);
      Comparable<Integer> comparable0 = max0.aggregate((Comparable<Integer>) null, (Comparable<Integer>) integer0);
      assertSame(integer0, comparable0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Max<String> max0 = new Max<String>();
      Comparable<String> comparable0 = max0.aggregate((Comparable<String>) "ch.lambdaj.function.aggregate.Chooser", (Comparable<String>) "ch.lambdaj.function.aggregate.Chooser");
      assertEquals("ch.lambdaj.function.aggregate.Chooser", comparable0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(36);
      Min<Integer> min0 = new Min<Integer>();
      Comparable<Integer> comparable0 = min0.aggregate((Comparable<Integer>) integer0, (Comparable<Integer>) null);
      assertSame(integer0, comparable0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Min<Object> min0 = new Min<Object>();
      Comparable<Object> comparable0 = min0.aggregate((Comparable<Object>) null, (Comparable<Object>) null);
      assertNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Min<Object> min0 = new Min<Object>();
      Comparable<Object> comparable0 = min0.aggregate((Iterator<? extends Comparable<Object>>) null);
      assertNull(comparable0);
  }
}
