/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Fri Jan 17 15:19:20 GMT 2020
 */

package ch.lambdaj.collection;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class LambdaList_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "ch.lambdaj.collection.LambdaList"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "C:\\Users\\Joao\\Desktop\\evosuite\\master"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\Joao\\AppData\\Local\\Temp\\"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(LambdaList_ESTest_scaffolding.class.getClassLoader() ,
      "ch.lambdaj.function.aggregate.PairAggregator",
      "ch.lambdaj.function.argument.FinalClassArgumentCreator",
      "ch.lambdaj.collection.LambdaSet",
      "ch.lambdaj.function.argument.ArgumentsFactory$1",
      "ch.lambdaj.collection.LambdaMap",
      "ch.lambdaj.function.aggregate.Aggregator",
      "ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator",
      "ch.lambdaj.collection.LambdaList",
      "ch.lambdaj.function.convert.StringLengthConverter",
      "ch.lambdaj.function.compare.ComparatorUtil$DescendingArgumentComparator",
      "ch.lambdaj.function.argument.ArgumentsFactory",
      "ch.lambdaj.function.aggregate.Sum",
      "ch.lambdaj.function.compare.ArgumentComparator",
      "ch.lambdaj.collection.LambdaIterable",
      "ch.lambdaj.function.aggregate.Chooser",
      "ch.lambdaj.collection.LambdaIterator",
      "ch.lambdaj.function.closure.WrongClosureInvocationException",
      "ch.lambdaj.function.closure.Closure",
      "ch.lambdaj.function.closure.ClosureResult",
      "ch.lambdaj.group.GroupImpl",
      "ch.lambdaj.function.convert.Converter",
      "ch.lambdaj.function.argument.Argument",
      "ch.lambdaj.function.matcher.OrMatcher",
      "ch.lambdaj.function.aggregate.Min",
      "ch.lambdaj.util.iterator.ResettableIterator",
      "ch.lambdaj.group.StringGroupCondition",
      "ch.lambdaj.function.convert.ConstructorArgumentConverter",
      "ch.lambdaj.collection.LambdaGroup",
      "ch.lambdaj.group.ArgumentGroupCondition",
      "ch.lambdaj.function.compare.ComparatorUtil$DescendingIgnoreCaseArgumentComparator",
      "ch.lambdaj.function.compare.ComparatorUtil$IgnoreCaseArgumentComparator",
      "ch.lambdaj.function.compare.ComparatorUtil",
      "ch.lambdaj.group.GroupItem",
      "org.hamcrest.SelfDescribing",
      "org.hamcrest.Description$NullDescription",
      "ch.lambdaj.util.NotUniqueItemException",
      "ch.lambdaj.function.argument.ArgumentConversionException",
      "ch.lambdaj.function.matcher.HasArgumentWithValue$BooleanMatcher",
      "ch.lambdaj.function.aggregate.Max",
      "ch.lambdaj.function.closure.AbstractClosure",
      "ch.lambdaj.util.IntrospectionException",
      "ch.lambdaj.util.iterator.IteratorFactory",
      "ch.lambdaj.function.convert.ArgumentConverter",
      "ch.lambdaj.collection.AbstractLambdaCollection",
      "ch.lambdaj.group.GroupCondition",
      "ch.lambdaj.function.aggregate.Concat",
      "ch.lambdaj.function.convert.PropertyExtractor",
      "ch.lambdaj.function.matcher.AndMatcher",
      "ch.lambdaj.collection.LambdaCollection",
      "org.hamcrest.BaseMatcher",
      "ch.lambdaj.function.closure.Invokable",
      "ch.lambdaj.util.iterator.ResettableIteratorOnArray",
      "ch.lambdaj.function.matcher.HasArgumentWithValue",
      "ch.lambdaj.group.Groups",
      "ch.lambdaj.Lambda",
      "ch.lambdaj.function.convert.ConverterIterator",
      "org.hamcrest.Description",
      "ch.lambdaj.util.iterator.ResettableIteratorOnIterable",
      "ch.lambdaj.util.iterator.ResettableIteratorOnIterator",
      "ch.lambdaj.util.IntrospectionUtil",
      "ch.lambdaj.group.Group",
      "ch.lambdaj.function.closure.DelayedClosure",
      "ch.lambdaj.function.matcher.LambdaJMatcher",
      "org.hamcrest.Matcher",
      "ch.lambdaj.function.aggregate.InitializedPairAggregator",
      "ch.lambdaj.function.closure.Closure1",
      "ch.lambdaj.function.closure.Closure0",
      "ch.lambdaj.function.convert.StringConverter",
      "ch.lambdaj.function.argument.ArgumentsFactory$LimitedValuesArgumentHolder",
      "ch.lambdaj.function.convert.StringPropertyExtractor",
      "ch.lambdaj.function.closure.Closure4",
      "ch.lambdaj.function.closure.Closure3",
      "ch.lambdaj.function.closure.Closure2"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(LambdaList_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "ch.lambdaj.collection.AbstractLambdaCollection",
      "ch.lambdaj.collection.LambdaIterable",
      "ch.lambdaj.collection.LambdaCollection",
      "ch.lambdaj.collection.LambdaList",
      "ch.lambdaj.function.aggregate.PairAggregator",
      "ch.lambdaj.function.aggregate.InitializedPairAggregator",
      "ch.lambdaj.function.aggregate.Sum",
      "ch.lambdaj.function.aggregate.Chooser",
      "ch.lambdaj.function.aggregate.Min",
      "ch.lambdaj.function.aggregate.Max",
      "ch.lambdaj.function.aggregate.Concat",
      "ch.lambdaj.Lambda",
      "ch.lambdaj.function.compare.ArgumentComparator",
      "ch.lambdaj.function.convert.ArgumentConverter",
      "ch.lambdaj.util.IntrospectionUtil",
      "ch.lambdaj.function.compare.ComparatorUtil$DefaultArgumentComparator",
      "ch.lambdaj.function.compare.ComparatorUtil$DescendingArgumentComparator",
      "ch.lambdaj.function.compare.ComparatorUtil$IgnoreCaseArgumentComparator",
      "ch.lambdaj.function.compare.ComparatorUtil$DescendingIgnoreCaseArgumentComparator",
      "ch.lambdaj.function.compare.ComparatorUtil",
      "ch.lambdaj.util.iterator.IteratorFactory",
      "ch.lambdaj.function.convert.ConstructorArgumentConverter",
      "ch.lambdaj.function.convert.ConverterIterator",
      "ch.lambdaj.util.IntrospectionException",
      "ch.lambdaj.collection.LambdaIterator",
      "ch.lambdaj.function.convert.PropertyExtractor",
      "ch.lambdaj.function.argument.Argument",
      "ch.lambdaj.collection.LambdaSet",
      "ch.lambdaj.function.convert.StringPropertyExtractor",
      "ch.lambdaj.function.convert.StringLengthConverter",
      "ch.lambdaj.util.iterator.ResettableIterator",
      "ch.lambdaj.util.iterator.ResettableIteratorOnIterable",
      "ch.lambdaj.group.GroupCondition",
      "ch.lambdaj.group.StringGroupCondition",
      "ch.lambdaj.collection.LambdaGroup",
      "ch.lambdaj.group.Groups",
      "ch.lambdaj.group.GroupImpl"
    );
  }
}
