/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 15:17:33 GMT 2020
 */

package ch.lambdaj.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.lambdaj.collection.LambdaIterator;
import ch.lambdaj.function.convert.Converter;
import ch.lambdaj.function.convert.PropertyExtractor;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LambdaIterator_ESTest extends LambdaIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      Iterator<String> iterator0 = arrayList0.iterator();
      LambdaIterator<String> lambdaIterator0 = new LambdaIterator<String>(iterator0);
      String string0 = lambdaIterator0.next();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      LambdaIterator<Object> lambdaIterator0 = new LambdaIterator<Object>(iterator0);
      lambdaIterator0.next();
      LambdaIterator<Locale.FilteringMode> lambdaIterator1 = new LambdaIterator<Locale.FilteringMode>(iterator0);
      lambdaIterator1.remove();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      boolean boolean0 = arrayList0.add("");
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      LambdaIterator<String> lambdaIterator0 = new LambdaIterator<String>(listIterator0);
      boolean boolean1 = lambdaIterator0.hasNext();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      LambdaIterator<String> lambdaIterator0 = new LambdaIterator<String>(listIterator0);
      linkedList0.add("'HPtniqBP!5in'Akst");
      // Undeclared exception!
      try { 
        lambdaIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator0 = arrayList0.iterator();
      LambdaIterator<String> lambdaIterator0 = new LambdaIterator<String>(iterator0);
      LambdaIterator<String> lambdaIterator1 = lambdaIterator0.retain((Matcher<?>) null);
      // Undeclared exception!
      try { 
        lambdaIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.util.iterator.MatchingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LambdaIterator<String> lambdaIterator0 = new LambdaIterator<String>((Iterator<? extends String>) null);
      // Undeclared exception!
      try { 
        lambdaIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.LambdaIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      LambdaIterator<Locale.FilteringMode> lambdaIterator0 = new LambdaIterator<Locale.FilteringMode>(iterator0);
      PropertyExtractor<Locale.FilteringMode, Locale.FilteringMode> propertyExtractor0 = new PropertyExtractor<Locale.FilteringMode, Locale.FilteringMode>("gd<f?#X$J.NM&");
      LambdaIterator<Locale.FilteringMode> lambdaIterator1 = lambdaIterator0.convert((Converter<Locale.FilteringMode, Locale.FilteringMode>) propertyExtractor0);
      // Undeclared exception!
      try { 
        lambdaIterator1.next();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoSuchMethodException: java.util.Locale$FilteringMode.gd<f?#X$J()
         //
         verifyException("ch.lambdaj.util.IntrospectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator0 = arrayList0.iterator();
      arrayList0.add("ch.lambdaj.function.argument.ArgumentsFactory");
      LambdaIterator<Object> lambdaIterator0 = new LambdaIterator<Object>(iterator0);
      // Undeclared exception!
      try { 
        lambdaIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LambdaIterator<Object> lambdaIterator0 = new LambdaIterator<Object>((Iterator<?>) null);
      // Undeclared exception!
      try { 
        lambdaIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.LambdaIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LambdaIterator<LambdaIterator<Object>> lambdaIterator0 = new LambdaIterator<LambdaIterator<Object>>((Iterator<? extends LambdaIterator<Object>>) null);
      // Undeclared exception!
      try { 
        lambdaIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.LambdaIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      LambdaIterator<String> lambdaIterator0 = new LambdaIterator<String>(listIterator0);
      boolean boolean0 = lambdaIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LambdaIterator<String> lambdaIterator0 = new LambdaIterator<String>((Iterator<? extends String>) null);
      LambdaIterator<String> lambdaIterator1 = lambdaIterator0.retain((Matcher<?>) null);
      // Undeclared exception!
      try { 
        lambdaIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.util.iterator.MatchingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator0 = arrayList0.iterator();
      LambdaIterator<Object> lambdaIterator0 = new LambdaIterator<Object>(iterator0);
      // Undeclared exception!
      try { 
        lambdaIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      LambdaIterator<Object> lambdaIterator0 = new LambdaIterator<Object>(listIterator0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        lambdaIterator0.extract(object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      LambdaIterator<String> lambdaIterator0 = new LambdaIterator<String>(listIterator0);
      // Undeclared exception!
      try { 
        lambdaIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }
}
