/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 15:43:33 GMT 2020
 */

package ch.lambdaj.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.lambdaj.collection.LambdaCollections;
import ch.lambdaj.collection.LambdaIterable;
import ch.lambdaj.collection.LambdaIterator;
import ch.lambdaj.collection.LambdaList;
import ch.lambdaj.collection.LambdaMap;
import ch.lambdaj.collection.LambdaSet;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LambdaCollections_ESTest extends LambdaCollections_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      LambdaSet<Integer> lambdaSet0 = LambdaCollections.with((Set<? extends Integer>) treeSet0);
      LambdaSet<Integer> lambdaSet1 = LambdaCollections.with((Set<? extends Integer>) lambdaSet0);
      LambdaCollections.with((Set<? extends Integer>) lambdaSet1);
      // Undeclared exception!
      try { 
        LambdaCollections.with((Iterable<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LambdaCollections.with((Set<?>) set0);
      LambdaSet<String> lambdaSet0 = LambdaCollections.with((Set<? extends String>) set0);
      LambdaCollections.with((Iterable<?>) lambdaSet0);
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      TreeSet<Locale.FilteringMode> treeSet1 = new TreeSet<Locale.FilteringMode>((SortedSet<Locale.FilteringMode>) treeSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      treeSet1.add(locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      treeSet0.add(locale_FilteringMode1);
      locale0.getDisplayLanguage();
      Iterator<Locale.FilteringMode> iterator0 = treeSet1.iterator();
      LambdaCollections.with((Iterator<?>) iterator0);
      treeSet0.add(locale_FilteringMode1);
      LambdaCollections.with((Collection<? extends String>) lambdaSet0);
      HashMap<Locale.FilteringMode, Locale.LanguageRange> hashMap0 = new HashMap<Locale.FilteringMode, Locale.LanguageRange>();
      LambdaCollections.with((Map<? extends Locale.FilteringMode, ? extends Locale.LanguageRange>) hashMap0);
      LambdaCollections.with((Iterable<?>) treeSet0);
      // Undeclared exception!
      try { 
        LambdaCollections.with((Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clone();
      String string0 = "";
      hashMap0.put("", "");
      hashMap0.clear();
      LambdaMap<String, String> lambdaMap0 = LambdaCollections.with((Map<? extends String, ? extends String>) hashMap0);
      LambdaCollections.with((Map<? extends String, ?>) lambdaMap0);
      HashMap<String, Locale.LanguageRange> hashMap1 = new HashMap<String, Locale.LanguageRange>();
      hashMap1.keySet();
      LambdaCollections.with((Map<?, ? extends Locale.LanguageRange>) hashMap1);
      LambdaMap<Locale.FilteringMode, Integer> lambdaMap1 = LambdaCollections.with((Map<? extends Locale.FilteringMode, ? extends Integer>) null);
      LambdaCollections.with((Map<? extends Locale.FilteringMode, ? extends Integer>) lambdaMap1);
      // Undeclared exception!
      try { 
        LambdaCollections.with((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      EnumSet<Locale.FilteringMode> enumSet1 = enumSet0.clone();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode2);
      Iterator<Locale.FilteringMode> iterator0 = enumSet1.iterator();
      LambdaCollections.with((Iterator<?>) iterator0);
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[4];
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode3;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode4;
      Locale.FilteringMode locale_FilteringMode5 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode5;
      Locale.FilteringMode locale_FilteringMode6 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[3] = locale_FilteringMode6;
      LambdaCollections.with(locale_FilteringModeArray0);
      LambdaCollections.with((Set<? extends Locale.FilteringMode>) enumSet0);
      // Undeclared exception!
      try { 
        LambdaCollections.with((List<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(",^~om", "");
      LambdaCollections.with((Map<? extends String, ?>) hashMap0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TreeSet<String> treeSet1 = new TreeSet<String>((SortedSet<String>) treeSet0);
      LambdaSet<String> lambdaSet0 = LambdaCollections.with((Set<? extends String>) treeSet1);
      assertFalse(lambdaSet0.contains(",^~om"));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("ch.lambdaj.collection.LambdaMap");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      stack0.replaceAll(unaryOperator0);
      stack0.add("ch.lambdaj.collection.LambdaMap");
      stack0.add("ch.lambdaj.collection.LambdaIterator");
      stack0.add("ch.lambdaj.collection.LambdaIterator");
      LambdaCollections.with((List<? extends String>) stack0);
      // Undeclared exception!
      try { 
        LambdaCollections.with((Locale.FilteringMode[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Iterator<Integer> iterator0 = arrayList0.iterator();
      LambdaCollections.with((Iterator<?>) iterator0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer((-4651));
      treeSet0.ceiling(integer0);
      LambdaCollections.with((Set<? extends Integer>) treeSet0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      arrayList0.listIterator(0);
      hashSet0.add((Object) null);
      hashSet0.addAll(arrayList0);
      LambdaCollections.with((Set<?>) hashSet0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Set<Integer> set0 = hashMap0.keySet();
      LambdaCollections.with((Set<?>) set0);
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      LambdaSet<Locale.FilteringMode> lambdaSet0 = LambdaCollections.with((Set<? extends Locale.FilteringMode>) enumSet0);
      HashSet<Locale.FilteringMode> hashSet1 = new HashSet<Locale.FilteringMode>(lambdaSet0);
      LambdaCollections.with((Iterable<? extends Locale.FilteringMode>) hashSet1);
      LambdaIterator<Integer> lambdaIterator0 = LambdaCollections.with((Iterator<? extends Integer>) iterator0);
      assertNotNull(lambdaIterator0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer((-1));
      linkedHashSet0.add(integer0);
      LambdaCollections.with((Collection<?>) linkedHashSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode0);
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.complementOf(enumSet0);
      LambdaSet<Locale.FilteringMode> lambdaSet0 = LambdaCollections.with((Set<? extends Locale.FilteringMode>) enumSet1);
      LambdaSet<Locale.FilteringMode> lambdaSet1 = LambdaCollections.with((Set<? extends Locale.FilteringMode>) lambdaSet0);
      LambdaCollections.with((Iterable<? extends Locale.FilteringMode>) lambdaSet1);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      LambdaSet<String> lambdaSet2 = LambdaCollections.with((Set<? extends String>) linkedHashSet1);
      LambdaCollections.with((Set<? extends String>) lambdaSet2);
      LambdaCollections.with((Set<? extends Integer>) linkedHashSet0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      LambdaCollections.with((Map<? extends Integer, ? extends String>) hashMap0);
      LambdaIterable<Object> lambdaIterable0 = LambdaCollections.with((Iterable<?>) lambdaSet2);
      assertNotNull(lambdaIterable0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("&%vb");
      LambdaCollections.with((Set<? extends String>) linkedHashSet0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&%vb";
      stringArray0[1] = "&%vb";
      stringArray0[2] = "&%vb";
      stringArray0[3] = "&%vb";
      stringArray0[4] = "ch.lambdaj.collection.LambdaCollection";
      stringArray0[5] = "&%vb";
      stringArray0[6] = "&%vb";
      stringArray0[7] = "&%vb";
      LambdaList<String> lambdaList0 = LambdaCollections.with(stringArray0);
      assertTrue(lambdaList0.contains("ch.lambdaj.collection.LambdaCollection"));
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TreeSet<List<String>> treeSet0 = new TreeSet<List<String>>();
  }
}
