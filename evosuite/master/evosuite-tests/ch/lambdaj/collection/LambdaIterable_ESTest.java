/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 15:39:45 GMT 2020
 */

package ch.lambdaj.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.lambdaj.collection.LambdaIterable;
import ch.lambdaj.collection.LambdaSet;
import ch.lambdaj.function.convert.Converter;
import ch.lambdaj.function.convert.PropertyExtractor;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LambdaIterable_ESTest extends LambdaIterable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 918;
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(918, 918);
      LambdaIterable<Object> lambdaIterable0 = new LambdaIterable<Object>(vector0);
      vector0.stream();
      // Undeclared exception!
      try { 
        lambdaIterable0.doSort(vector0, (-3423));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown comparator option: -3423
         //
         verifyException("ch.lambdaj.function.compare.ComparatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LambdaIterable<DataTruncation> lambdaIterable0 = new LambdaIterable<DataTruncation>(vector0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) lambdaIterable0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) vector0;
      objectArray0[3] = (Object) vector0;
      objectArray0[4] = (Object) lambdaIterable0;
      objectArray0[5] = (Object) class0;
      // Undeclared exception!
      try { 
        lambdaIterable0.doProject(class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to find a constructor of java.sql.BatchUpdateException compatible with the given arguments
         //
         verifyException("ch.lambdaj.function.convert.ConstructorArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>((SortedSet<? extends SQLInvalidAuthorizationSpecException>) treeSet0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("S^(*[IOH]!", "It is not possible to create a placeholder for class: ");
      priorityQueue0.add(sQLInvalidAuthorizationSpecException0);
      LambdaIterable<SQLInvalidAuthorizationSpecException> lambdaIterable0 = new LambdaIterable<SQLInvalidAuthorizationSpecException>(priorityQueue0);
      LambdaIterable<SQLInvalidAuthorizationSpecException> lambdaIterable1 = lambdaIterable0.clone();
      Matcher<Integer> matcher0 = null;
      // Undeclared exception!
      try { 
        lambdaIterable1.retain((Matcher<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>(1, 1);
      LambdaIterable<SQLNonTransientConnectionException> lambdaIterable0 = new LambdaIterable<SQLNonTransientConnectionException>(linkedHashSet0);
      PropertyExtractor<SQLNonTransientConnectionException, SQLNonTransientConnectionException> propertyExtractor0 = new PropertyExtractor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((String) null);
      LambdaIterable<SQLNonTransientConnectionException> lambdaIterable1 = lambdaIterable0.convert((Converter<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) propertyExtractor0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Object[] objectArray0 = new Object[0];
      LambdaIterable<SQLNonTransientConnectionException> lambdaIterable2 = lambdaIterable1.project(class0, objectArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        lambdaIterable2.minFrom();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to introspect on an empty iterator. Use the overloaded method accepting a class instead
         //
         verifyException("ch.lambdaj.util.iterator.IteratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<BatchUpdateException> treeSet0 = new TreeSet<BatchUpdateException>();
      LambdaIterable<BatchUpdateException> lambdaIterable0 = new LambdaIterable<BatchUpdateException>(treeSet0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        lambdaIterable0.project(class0, objectArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(stack0);
      LambdaIterable<Object> lambdaIterable0 = new LambdaIterable<Object>(linkedList0);
      LambdaSet<Object> lambdaSet0 = lambdaIterable0.distinct();
      lambdaSet0.iterator();
      Matcher<SQLInvalidAuthorizationSpecException> matcher0 = null;
      // Undeclared exception!
      try { 
        lambdaSet0.doRemove((Matcher<?>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/hamcrest/Matchers
         //
         verifyException("ch.lambdaj.collection.LambdaIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>(treeSet0);
      ArrayList<SQLTransientConnectionException> arrayList1 = new ArrayList<SQLTransientConnectionException>();
      LambdaIterable<SQLTransientConnectionException> lambdaIterable0 = new LambdaIterable<SQLTransientConnectionException>(arrayList1);
      String string0 = "wYl*a4ssQ";
      PropertyExtractor<SQLTransientConnectionException, SQLTransientConnectionException> propertyExtractor0 = new PropertyExtractor<SQLTransientConnectionException, SQLTransientConnectionException>("wYl*a4ssQ");
      lambdaIterable0.convert((Converter<SQLTransientConnectionException, SQLTransientConnectionException>) propertyExtractor0);
      int int0 = (-1601);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      // Undeclared exception!
      try { 
        lambdaIterable0.joinFrom();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to introspect on an empty iterator. Use the overloaded method accepting a class instead
         //
         verifyException("ch.lambdaj.util.iterator.IteratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<SQLClientInfoException> linkedHashSet0 = new LinkedHashSet<SQLClientInfoException>();
      HashSet<SQLClientInfoException> hashSet0 = new HashSet<SQLClientInfoException>(linkedHashSet0);
      LambdaIterable<SQLClientInfoException> lambdaIterable0 = new LambdaIterable<SQLClientInfoException>(hashSet0);
      PriorityQueue<SQLTransientException> priorityQueue0 = new PriorityQueue<SQLTransientException>();
      int int0 = 0;
      LambdaIterable<SQLClientInfoException> lambdaIterable1 = lambdaIterable0.clone();
      Stack<SQLClientInfoException> stack0 = new Stack<SQLClientInfoException>();
      ListIterator<SQLClientInfoException> listIterator0 = stack0.listIterator();
      lambdaIterable1.innerIterator = (Iterator<? extends SQLClientInfoException>) listIterator0;
      lambdaIterable1.doConvert((Converter<SQLClientInfoException, SQLTimeoutException>) null);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      ClientInfoStatus clientInfoStatus2 = ClientInfoStatus.REASON_UNKNOWN;
      EnumSet<ClientInfoStatus> enumSet0 = EnumSet.of(clientInfoStatus0, clientInfoStatus0, clientInfoStatus1, clientInfoStatus2);
      LambdaIterable<ClientInfoStatus> lambdaIterable2 = new LambdaIterable<ClientInfoStatus>(enumSet0);
      PropertyExtractor<ClientInfoStatus, ClientInfoStatus> propertyExtractor0 = new PropertyExtractor<ClientInfoStatus, ClientInfoStatus>("ch.lambdaj.collection.LambdaIterable");
      // Undeclared exception!
      try { 
        lambdaIterable2.convert((Converter<ClientInfoStatus, ClientInfoStatus>) propertyExtractor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoSuchMethodException: java.sql.ClientInfoStatus.ch()
         //
         verifyException("ch.lambdaj.util.IntrospectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>((Comparator<? super Integer>) null);
      Integer integer0 = new Integer(0);
      LambdaIterable<Object> lambdaIterable0 = new LambdaIterable<Object>(treeSet0);
      Class<Object> class0 = Object.class;
      LambdaIterable<Object> lambdaIterable1 = lambdaIterable0.project(class0, (Object[]) null);
      DataTruncation dataTruncation0 = new DataTruncation(0, true, true, 0, 0);
      // Undeclared exception!
      try { 
        lambdaIterable1.extract((Object) dataTruncation0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(13);
      LambdaIterable<Integer> lambdaIterable0 = new LambdaIterable<Integer>(arrayList0);
      LambdaIterable<Integer> lambdaIterable1 = lambdaIterable0.convert((Converter<Integer, Integer>) null);
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) arrayList0;
      // Undeclared exception!
      try { 
        lambdaIterable1.project(class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to find a constructor of java.lang.Integer compatible with the given arguments
         //
         verifyException("ch.lambdaj.function.convert.ConstructorArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stack<SQLDataException> stack0 = new Stack<SQLDataException>();
      LinkedList<SQLDataException> linkedList0 = new LinkedList<SQLDataException>(stack0);
      LambdaIterable<Object> lambdaIterable0 = new LambdaIterable<Object>(linkedList0);
      LambdaSet<Object> lambdaSet0 = lambdaIterable0.distinct();
      Matcher<SQLInvalidAuthorizationSpecException> matcher0 = null;
      // Undeclared exception!
      try { 
        lambdaSet0.doRemove((Matcher<?>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/hamcrest/Matchers
         //
         verifyException("ch.lambdaj.collection.LambdaIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 4375;
      Vector<String> vector0 = new Vector<String>(4375);
      String string0 = "ch.lambdaj.collection.LambdaIterable";
      vector0.add("ch.lambdaj.collection.LambdaIterable");
      vector0.stream();
      vector0.add("ch.lambdaj.collection.LambdaIterable");
      LambdaIterable<String> lambdaIterable0 = new LambdaIterable<String>(vector0);
      LinkedHashSet<SQLSyntaxErrorException> linkedHashSet0 = new LinkedHashSet<SQLSyntaxErrorException>();
      LambdaIterable<SQLSyntaxErrorException> lambdaIterable1 = new LambdaIterable<SQLSyntaxErrorException>(linkedHashSet0);
      lambdaIterable0.setInner(vector0);
      LambdaSet<SQLSyntaxErrorException> lambdaSet0 = lambdaIterable1.distinct();
      // Undeclared exception!
      try { 
        lambdaSet0.doSort(lambdaIterable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 918;
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(918, 918);
      LambdaIterable<Object> lambdaIterable0 = new LambdaIterable<Object>(vector0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) lambdaIterable0;
      String string0 = "";
      // Undeclared exception!
      try { 
        lambdaIterable0.joinFrom("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to introspect on an empty iterator. Use the overloaded method accepting a class instead
         //
         verifyException("ch.lambdaj.util.iterator.IteratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeSet<Locale.FilteringMode> treeSet0 = new TreeSet<Locale.FilteringMode>();
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((SortedSet<? extends Locale.FilteringMode>) treeSet0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      priorityQueue0.add(locale_FilteringMode0);
      LambdaIterable<Locale.FilteringMode> lambdaIterable0 = new LambdaIterable<Locale.FilteringMode>(priorityQueue0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode4 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode3, locale_FilteringMode1, locale_FilteringMode4);
      EnumSet<Locale.FilteringMode> enumSet1 = enumSet0.clone();
      EnumSet<Locale.FilteringMode> enumSet2 = enumSet1.clone();
      enumSet1.clone();
      Iterator<Locale.FilteringMode> iterator0 = enumSet2.iterator();
      lambdaIterable0.innerIterator = iterator0;
      // Undeclared exception!
      try { 
        lambdaIterable0.sumFrom();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/function/aggregate/ProxyAggregator
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<SQLIntegrityConstraintViolationException> treeSet0 = new TreeSet<SQLIntegrityConstraintViolationException>();
      PriorityQueue<SQLIntegrityConstraintViolationException> priorityQueue0 = new PriorityQueue<SQLIntegrityConstraintViolationException>((SortedSet<? extends SQLIntegrityConstraintViolationException>) treeSet0);
      LambdaIterable<SQLIntegrityConstraintViolationException> lambdaIterable0 = new LambdaIterable<SQLIntegrityConstraintViolationException>(priorityQueue0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Object[] objectArray0 = new Object[0];
      LambdaIterable<SQLIntegrityConstraintViolationException> lambdaIterable1 = lambdaIterable0.project(class0, objectArray0);
      LambdaSet<SQLIntegrityConstraintViolationException> lambdaSet0 = lambdaIterable1.distinct();
      LambdaIterable<SQLIntegrityConstraintViolationException> lambdaIterable2 = lambdaSet0.clone();
      String string0 = "@CQp%mSqIFS1nbYG}";
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("@CQp%mSqIFS1nbYG}", "@CQp%mSqIFS1nbYG}", sQLRecoverableException0);
      // Undeclared exception!
      try { 
        lambdaIterable2.extract(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<SQLClientInfoException> vector0 = new Vector<SQLClientInfoException>();
      LambdaIterable<SQLClientInfoException> lambdaIterable0 = new LambdaIterable<SQLClientInfoException>(vector0);
      String string0 = "qe2Dbz";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      sQLClientInfoException0.getFailedProperties();
      lambdaIterable0.spliterator();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("qe2Dbz", (Map<String, ClientInfoStatus>) null);
      vector0.add(sQLClientInfoException1);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        lambdaIterable0.doExtract(arrayDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1);
      LambdaIterable<Locale.FilteringMode> lambdaIterable0 = new LambdaIterable<Locale.FilteringMode>(enumSet0);
      Converter<Locale.FilteringMode, Locale.FilteringMode> converter0 = null;
      // Undeclared exception!
      try { 
        lambdaIterable0.convert((Converter<Locale.FilteringMode, Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.function.convert.ConverterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<SQLTimeoutException> treeSet0 = new TreeSet<SQLTimeoutException>();
      TreeSet<SQLTimeoutException> treeSet1 = new TreeSet<SQLTimeoutException>((SortedSet<SQLTimeoutException>) treeSet0);
      LambdaIterable<SQLTimeoutException> lambdaIterable0 = new LambdaIterable<SQLTimeoutException>(treeSet1);
      LambdaSet<SQLTimeoutException> lambdaSet0 = lambdaIterable0.distinct();
      String string0 = "#/_N";
      int[] intArray0 = new int[1];
      int int0 = 345;
      intArray0[0] = 345;
      lambdaSet0.innerClone(treeSet1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("#/_N", batchUpdateException0);
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) batchUpdateException0;
      objectArray0[1] = (Object) treeSet0;
      objectArray0[2] = (Object) treeSet0;
      // Undeclared exception!
      try { 
        lambdaIterable0.project(class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to find a constructor of java.sql.SQLTimeoutException compatible with the given arguments
         //
         verifyException("ch.lambdaj.function.convert.ConstructorArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<SQLNonTransientConnectionException> linkedList0 = new LinkedList<SQLNonTransientConnectionException>();
      LambdaIterable<SQLNonTransientConnectionException> lambdaIterable0 = new LambdaIterable<SQLNonTransientConnectionException>(linkedList0);
      LambdaSet<SQLNonTransientConnectionException> lambdaSet0 = lambdaIterable0.distinct();
      LambdaIterable<SQLNonTransientConnectionException> lambdaIterable1 = lambdaSet0.clone();
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      // Undeclared exception!
      try { 
        lambdaIterable1.extract(sQLNonTransientConnectionException0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<SQLInvalidAuthorizationSpecException> linkedHashSet0 = new LinkedHashSet<SQLInvalidAuthorizationSpecException>(0);
      LambdaIterable<SQLInvalidAuthorizationSpecException> lambdaIterable0 = new LambdaIterable<SQLInvalidAuthorizationSpecException>(linkedHashSet0);
      String string0 = "";
      lambdaIterable0.iterator();
      SQLException sQLException0 = new SQLException("");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 0, sQLException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((String) null, "");
      linkedHashSet0.add(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", "", 0, sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionException0.printStackTrace();
      // Undeclared exception!
      try { 
        lambdaIterable0.extract(sQLNonTransientConnectionException0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>(0);
      String string0 = "]";
      SQLWarning sQLWarning0 = new SQLWarning("]", "]", 0);
      DataTruncation dataTruncation0 = new DataTruncation(0, false, false, 0, 0, sQLWarning0);
      dataTruncation0.fillInStackTrace();
      linkedHashSet0.add(dataTruncation0);
      ArrayList<SQLInvalidAuthorizationSpecException> arrayList0 = new ArrayList<SQLInvalidAuthorizationSpecException>();
      linkedHashSet0.retainAll(arrayList0);
      LambdaIterable<DataTruncation> lambdaIterable0 = new LambdaIterable<DataTruncation>(linkedHashSet0);
      // Undeclared exception!
      try { 
        lambdaIterable0.maxFrom();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to introspect on an empty iterator. Use the overloaded method accepting a class instead
         //
         verifyException("ch.lambdaj.util.iterator.IteratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LambdaIterable<String> lambdaIterable0 = new LambdaIterable<String>(set0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      int int0 = 0;
      // Undeclared exception!
      try { 
        lambdaIterable0.doSort(locale0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<SQLIntegrityConstraintViolationException> arrayList0 = new ArrayList<SQLIntegrityConstraintViolationException>();
      LambdaIterable<SQLIntegrityConstraintViolationException> lambdaIterable0 = new LambdaIterable<SQLIntegrityConstraintViolationException>(arrayList0);
      // Undeclared exception!
      try { 
        lambdaIterable0.sumFrom();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to introspect on an empty iterator. Use the overloaded method accepting a class instead
         //
         verifyException("ch.lambdaj.util.iterator.IteratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(13);
      arrayList0.add(integer0);
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(arrayList0);
      LambdaIterable<Integer> lambdaIterable0 = new LambdaIterable<Integer>(priorityQueue0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("ch.lambdaj.collection.LambdaIterable", "ch.lambdaj.collection.LambdaIterable");
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("", "", 1345, sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        lambdaIterable0.distinct((Object) sQLSyntaxErrorException1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 13;
      ArrayDeque<SQLTransientConnectionException> arrayDeque0 = new ArrayDeque<SQLTransientConnectionException>(13);
      LambdaIterable<SQLException> lambdaIterable0 = new LambdaIterable<SQLException>(arrayDeque0);
      // Undeclared exception!
      try { 
        lambdaIterable0.sort((Object) arrayDeque0, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown comparator option: 13
         //
         verifyException("ch.lambdaj.function.compare.ComparatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ServiceLoader<SQLInvalidAuthorizationSpecException> serviceLoader0 = ServiceLoader.load(class0);
      LambdaIterable<SQLInvalidAuthorizationSpecException> lambdaIterable0 = new LambdaIterable<SQLInvalidAuthorizationSpecException>(serviceLoader0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        lambdaIterable0.sort((Object) serviceLoader0, 1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<DataTruncation> vector0 = new Vector<DataTruncation>();
      LinkedList<DataTruncation> linkedList0 = new LinkedList<DataTruncation>(vector0);
      LambdaIterable<DataTruncation> lambdaIterable0 = new LambdaIterable<DataTruncation>(linkedList0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("7Tlb3y.n 04Y5f6+~.F", "7Tlb3y.n 04Y5f6+~.F", (-1), intArray0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("7Tlb3y.n 04Y5f6+~.F", "7Tlb3y.n 04Y5f6+~.F", (-1), batchUpdateException0);
      // Undeclared exception!
      try { 
        lambdaIterable0.sort((Object) sQLSyntaxErrorException0, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown comparator option: -1
         //
         verifyException("ch.lambdaj.function.compare.ComparatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LambdaIterable<SQLException> lambdaIterable0 = null;
      try {
        lambdaIterable0 = new LambdaIterable<SQLException>((Iterable<? extends SQLException>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<SQLFeatureNotSupportedException> arrayList0 = new ArrayList<SQLFeatureNotSupportedException>();
      LambdaIterable<SQLFeatureNotSupportedException> lambdaIterable0 = new LambdaIterable<SQLFeatureNotSupportedException>(arrayList0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Zp4&$X08[[Gyg(gW/?-", "zUKr$");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        lambdaIterable0.sort((Object) sQLSyntaxErrorException0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      ServiceLoader<SQLDataException> serviceLoader0 = ServiceLoader.load(class0);
      LambdaIterable<SQLException> lambdaIterable0 = new LambdaIterable<SQLException>(serviceLoader0);
      Matcher<Integer> matcher0 = null;
      // Undeclared exception!
      try { 
        lambdaIterable0.remove((Matcher<?>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/hamcrest/Matchers
         //
         verifyException("ch.lambdaj.collection.LambdaIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeSet<SQLTransactionRollbackException> treeSet0 = new TreeSet<SQLTransactionRollbackException>();
      LambdaIterable<SQLTransactionRollbackException> lambdaIterable0 = new LambdaIterable<SQLTransactionRollbackException>(treeSet0);
      LambdaIterable<SQLTransactionRollbackException> lambdaIterable1 = lambdaIterable0.clone();
      // Undeclared exception!
      try { 
        lambdaIterable1.sort((Object) lambdaIterable0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      ServiceLoader<SQLClientInfoException> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      LambdaIterable<SQLClientInfoException> lambdaIterable0 = new LambdaIterable<SQLClientInfoException>(serviceLoader0);
      Matcher<SQLException> matcher0 = null;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      LambdaIterable<SQLClientInfoException> lambdaIterable1 = lambdaIterable0.replace((Matcher<?>) null, sQLClientInfoException0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        lambdaIterable1.distinct((Object) locale_FilteringMode0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<SQLNonTransientConnectionException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientConnectionException>(1, 1);
      LambdaIterable<SQLNonTransientConnectionException> lambdaIterable0 = new LambdaIterable<SQLNonTransientConnectionException>(linkedHashSet0);
      PropertyExtractor<SQLNonTransientConnectionException, SQLNonTransientConnectionException> propertyExtractor0 = new PropertyExtractor<SQLNonTransientConnectionException, SQLNonTransientConnectionException>((String) null);
      LambdaIterable<SQLNonTransientConnectionException> lambdaIterable1 = lambdaIterable0.convert((Converter<SQLNonTransientConnectionException, SQLNonTransientConnectionException>) propertyExtractor0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      Object[] objectArray0 = new Object[0];
      LambdaIterable<SQLNonTransientConnectionException> lambdaIterable2 = lambdaIterable1.project(class0, objectArray0);
      LambdaIterable<SQLNonTransientConnectionException> lambdaIterable3 = lambdaIterable2.clone();
      lambdaIterable3.spliterator();
      // Undeclared exception!
      try { 
        lambdaIterable3.sort((Object) propertyExtractor0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque0 = new ArrayDeque<SQLInvalidAuthorizationSpecException>();
      ArrayDeque<SQLInvalidAuthorizationSpecException> arrayDeque1 = new ArrayDeque<SQLInvalidAuthorizationSpecException>(arrayDeque0);
      LambdaIterable<Object> lambdaIterable0 = new LambdaIterable<Object>(arrayDeque1);
      String string0 = ".";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(".");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(".", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        lambdaIterable0.extract((Object) sQLRecoverableException0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 918;
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>(918, 918);
      LambdaIterable<Object> lambdaIterable0 = new LambdaIterable<Object>(vector0);
      String string0 = "";
      // Undeclared exception!
      try { 
        lambdaIterable0.joinFrom("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to introspect on an empty iterator. Use the overloaded method accepting a class instead
         //
         verifyException("ch.lambdaj.util.iterator.IteratorFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeSet<SQLInvalidAuthorizationSpecException> treeSet0 = new TreeSet<SQLInvalidAuthorizationSpecException>();
      PriorityQueue<SQLInvalidAuthorizationSpecException> priorityQueue0 = new PriorityQueue<SQLInvalidAuthorizationSpecException>((SortedSet<? extends SQLInvalidAuthorizationSpecException>) treeSet0);
      LambdaIterable<SQLInvalidAuthorizationSpecException> lambdaIterable0 = new LambdaIterable<SQLInvalidAuthorizationSpecException>(priorityQueue0);
      LambdaIterable<SQLInvalidAuthorizationSpecException> lambdaIterable1 = lambdaIterable0.clone();
      LambdaIterable<SQLInvalidAuthorizationSpecException> lambdaIterable2 = lambdaIterable1.retain((Matcher<?>) null);
      LambdaSet<SQLInvalidAuthorizationSpecException> lambdaSet0 = lambdaIterable2.distinct();
      // Undeclared exception!
      try { 
        lambdaSet0.remove((Matcher<?>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/hamcrest/Matchers
         //
         verifyException("ch.lambdaj.collection.LambdaIterable", e);
      }
  }
}
