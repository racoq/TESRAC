/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 15:19:20 GMT 2020
 */

package ch.lambdaj.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.lambdaj.collection.LambdaList;
import ch.lambdaj.function.argument.Argument;
import ch.lambdaj.function.convert.ArgumentConverter;
import ch.lambdaj.function.convert.ConstructorArgumentConverter;
import ch.lambdaj.function.convert.Converter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LambdaList_ESTest extends LambdaList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(stack0);
      ListIterator<String> listIterator0 = lambdaList0.listIterator(0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      LambdaList<Locale.Category> lambdaList0 = new LambdaList<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      lambdaList0.add(locale_Category0);
      Locale.Category locale_Category1 = lambdaList0.set(0, locale_Category0);
      assertTrue(linkedList0.contains(locale_Category1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(arrayList0);
      arrayList0.add("ch.lambdaj.collection.LambdaList");
      String string0 = lambdaList0.remove(0);
      assertEquals("ch.lambdaj.collection.LambdaList", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(arrayList0);
      arrayList0.add("ch.lambdaj.collection.LambdaList");
      int int0 = lambdaList0.lastIndexOf("ch.lambdaj.collection.LambdaList");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(arrayList0);
      arrayList0.add("chDlambdaj.collection.(ambdaList");
      lambdaList0.add(0, "chDlambdaj.collection.(ambdaList");
      int int0 = lambdaList0.lastIndexOf("chDlambdaj.collection.(ambdaList");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(arrayList0);
      boolean boolean0 = arrayList0.add("ch.lambdaj.collection.LambdaList");
      boolean boolean1 = lambdaList0.addAll(0, (Collection<? extends String>) lambdaList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      LambdaList<Object> lambdaList0 = new LambdaList<Object>(vector0);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      boolean boolean0 = lambdaList0.addAll(0, (Collection<?>) set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(stack0);
      // Undeclared exception!
      try { 
        lambdaList0.subList((-3), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(linkedList0);
      // Undeclared exception!
      try { 
        lambdaList0.subList(1671, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1671) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(vector0);
      Integer integer0 = new Integer((-1392));
      // Undeclared exception!
      try { 
        lambdaList0.sort((Object) integer0, 0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(vector0);
      // Undeclared exception!
      try { 
        lambdaList0.set((-3179), "fOU0sP+m0>");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3179
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(stack0);
      Integer integer0 = new Integer(1);
      stack0.add(integer0);
      // Undeclared exception!
      try { 
        lambdaList0.retain((Matcher<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(stack0);
      Integer integer0 = new Integer(1);
      stack0.add(integer0);
      // Undeclared exception!
      try { 
        lambdaList0.replace((Matcher<?>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.LambdaIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(stack0);
      // Undeclared exception!
      try { 
        lambdaList0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      LambdaList<Locale.Category> lambdaList0 = new LambdaList<Locale.Category>(stack0);
      Class<Locale.Category> class0 = Locale.Category.class;
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        lambdaList0.project(class0, objectArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to find a constructor of java.util.Locale$Category compatible with the given arguments
         //
         verifyException("ch.lambdaj.function.convert.ConstructorArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(linkedList0);
      // Undeclared exception!
      try { 
        lambdaList0.get(198);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 198, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("ch.lambdaj.collection.LambdaGroup");
      LambdaList<String> lambdaList0 = new LambdaList<String>(vector0);
      ArgumentConverter<String, String> argumentConverter0 = new ArgumentConverter<String, String>((Argument<String>) null);
      // Undeclared exception!
      try { 
        lambdaList0.convert((Converter<String, String>) argumentConverter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>(linkedHashSet0);
      LambdaList<String> lambdaList0 = new LambdaList<String>(arrayList0);
      // Undeclared exception!
      try { 
        lambdaList0.addAll((-5063), (Collection<? extends String>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5063, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LambdaList<Object> lambdaList0 = new LambdaList<Object>(arrayList0);
      // Undeclared exception!
      try { 
        lambdaList0.add((-641), (Object) lambdaList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -641, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(vector0);
      // Undeclared exception!
      try { 
        lambdaList0.add(2138, "fOU0sP+m0>");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2138 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LambdaList<Object> lambdaList0 = null;
      try {
        lambdaList0 = new LambdaList<Object>((List<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(vector0);
      LambdaList<Object> lambdaList1 = new LambdaList<Object>(vector0);
      LambdaList<Object> lambdaList2 = lambdaList1.clone((List<?>) lambdaList0);
      assertTrue(lambdaList2.equals((Object)lambdaList1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      LambdaList<Locale.Category> lambdaList0 = new LambdaList<Locale.Category>(linkedList0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        lambdaList0.set(0, locale_Category0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(vector0);
      // Undeclared exception!
      try { 
        lambdaList0.get(1925);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1925
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LambdaList<Object> lambdaList0 = new LambdaList<Object>(arrayList0);
      Class<Object> class0 = Object.class;
      LambdaList<Object> lambdaList1 = lambdaList0.project(class0, (Object[]) null);
      assertNotSame(lambdaList0, lambdaList1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>(1, (-1));
      LambdaList<Object> lambdaList0 = new LambdaList<Object>(vector0);
      // Undeclared exception!
      try { 
        lambdaList0.sort((Object) vector0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(stack0);
      LambdaList<Integer> lambdaList1 = lambdaList0.retain((Matcher<?>) null);
      assertSame(lambdaList1, lambdaList0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(arrayList0);
      ListIterator<String> listIterator0 = lambdaList0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      LambdaList<Object> lambdaList0 = new LambdaList<Object>(vector0);
      // Undeclared exception!
      try { 
        lambdaList0.listIterator((-1399));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1399
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(arrayList0);
      LambdaList<String> lambdaList1 = lambdaList0.subList(0, 0);
      lambdaList0.add(0, "x");
      // Undeclared exception!
      try { 
        lambdaList1.listIterator();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(stack0);
      Integer integer0 = new Integer(1);
      LambdaList<Integer> lambdaList1 = lambdaList0.replace((Matcher<?>) null, integer0);
      assertFalse(lambdaList1.contains(1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LambdaList<Object> lambdaList0 = new LambdaList<Object>(arrayList0);
      Class<Object> class0 = Object.class;
      ConstructorArgumentConverter<Object, Object> constructorArgumentConverter0 = new ConstructorArgumentConverter<Object, Object>(class0, (Object[]) null);
      LambdaList<Object> lambdaList1 = lambdaList0.convert((Converter<Object, Object>) constructorArgumentConverter0);
      assertTrue(lambdaList1.equals((Object)lambdaList0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(arrayList0);
      int int0 = lambdaList0.lastIndexOf("ch.lambdaj.collection.LambdaList");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(stack0);
      // Undeclared exception!
      try { 
        lambdaList0.addAll(842, (Collection<? extends Integer>) stack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 842
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(stack0);
      LambdaList<Integer> lambdaList1 = lambdaList0.clone();
      assertNotSame(lambdaList1, lambdaList0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LambdaList<Object> lambdaList0 = new LambdaList<Object>(arrayList0);
      // Undeclared exception!
      try { 
        lambdaList0.sort((Object) lambdaList0, (-667));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown comparator option: -667
         //
         verifyException("ch.lambdaj.function.compare.ComparatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(stack0);
      // Undeclared exception!
      try { 
        lambdaList0.extract("fOU0nsP+m0>");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      LambdaList<String> lambdaList0 = new LambdaList<String>(vector0);
      // Undeclared exception!
      try { 
        lambdaList0.remove((Matcher<?>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/hamcrest/Matchers
         //
         verifyException("ch.lambdaj.collection.LambdaIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      LambdaList<Integer> lambdaList0 = new LambdaList<Integer>(stack0);
      int int0 = lambdaList0.indexOf(stack0);
      assertFalse(lambdaList0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LambdaList<Object> lambdaList0 = new LambdaList<Object>(linkedList0);
      // Undeclared exception!
      try { 
        lambdaList0.remove(42);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 42, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      LambdaList<Object> lambdaList0 = new LambdaList<Object>(arrayList0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        lambdaList0.distinct(object0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.compare.ArgumentComparator", e);
      }
  }
}
