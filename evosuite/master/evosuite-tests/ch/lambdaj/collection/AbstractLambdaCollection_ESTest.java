/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 15:38:08 GMT 2020
 */

package ch.lambdaj.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.lambdaj.collection.AbstractLambdaCollection;
import ch.lambdaj.collection.LambdaMap;
import ch.lambdaj.function.aggregate.Aggregator;
import ch.lambdaj.function.aggregate.Concat;
import ch.lambdaj.function.aggregate.SumInteger;
import ch.lambdaj.function.convert.Converter;
import ch.lambdaj.function.convert.PropertyExtractor;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.hamcrest.Matcher;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLambdaCollection_ESTest extends AbstractLambdaCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(arrayDeque0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(arrayDeque0);
      abstractLambdaCollection0.setInner(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      EnumSet<Locale.Category> enumSet1 = EnumSet.complementOf(enumSet0);
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(enumSet1);
      String string0 = abstractLambdaCollection0.join((String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(arrayDeque0);
      Integer integer0 = new Integer(0);
      arrayDeque0.add(integer0);
      String string0 = abstractLambdaCollection0.join();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(arrayDeque0);
      Concat concat0 = new Concat("");
      Object object0 = abstractLambdaCollection0.aggregate((Aggregator<Object>) concat0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      arrayList0.add(locale_Category0);
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(arrayList0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.unique((Matcher<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.util.iterator.MatchingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractLambdaCollection<AbstractLambdaCollection<Object>> abstractLambdaCollection0 = new AbstractLambdaCollection<AbstractLambdaCollection<Object>>((Iterator<? extends AbstractLambdaCollection<Object>>) null);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(treeSet0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      treeSet0.add(locale_Category0);
      PropertyExtractor<Locale.Category, Object> propertyExtractor0 = new PropertyExtractor<Locale.Category, Object>("a1z;k[s3 ");
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.map((Converter<Locale.Category, Object>) propertyExtractor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NoSuchMethodException: java.util.Locale$Category.a1z;k[s3 ()
         //
         verifyException("ch.lambdaj.util.IntrospectionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("ch.lambdaj.function.aggregate.Avg");
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(priorityQueue0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.map((Converter<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.offer("2$|mW_OP6e*k^");
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      AbstractLambdaCollection<String> abstractLambdaCollection0 = new AbstractLambdaCollection<String>(iterator0);
      arrayDeque0.clear();
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.join();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DescendingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ListIterator<Locale.Category> listIterator0 = linkedList0.listIterator();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.add(locale_Category0);
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(listIterator0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.forEach((Matcher<?>) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(iterator0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.forEach((Matcher<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Iterator<Locale.Category> iterator0 = linkedList0.iterator();
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(iterator0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.add(locale_Category0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.forEach();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      AbstractLambdaCollection<String> abstractLambdaCollection0 = new AbstractLambdaCollection<String>(arrayList0);
      arrayList0.add("ch.lambdaj.function.argument.InvocationSequence");
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.forEach();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/ProxyIterator
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(iterator0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.forEach();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // forEach() is unable to introspect on an empty iterator. Use the overloaded method accepting a class instead
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(treeSet0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      treeSet0.add(locale_Category0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.first((Matcher<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(enumSet0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.exists((Matcher<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>((Iterator<?>) null);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(arrayDeque0);
      Integer integer0 = new Integer(0);
      arrayDeque0.add(integer0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.all((Matcher<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(listIterator0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      SumInteger sumInteger0 = new SumInteger((Integer) null);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.aggregate((Aggregator<Integer>) sumInteger0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      AbstractLambdaCollection<String> abstractLambdaCollection0 = new AbstractLambdaCollection<String>(priorityQueue0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.aggregate((Aggregator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = null;
      try {
        abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>((Iterable<? extends Locale.Category>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(treeSet0);
      abstractLambdaCollection0.first((Matcher<?>) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      AbstractLambdaCollection<String> abstractLambdaCollection0 = new AbstractLambdaCollection<String>(priorityQueue0);
      AbstractLambdaCollection<Object> abstractLambdaCollection1 = new AbstractLambdaCollection<Object>(priorityQueue0);
      boolean boolean0 = abstractLambdaCollection0.equals(abstractLambdaCollection1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(priorityQueue0);
      boolean boolean0 = abstractLambdaCollection0.equals("Erjv{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      Iterator<Locale.Category> iterator0 = linkedList0.iterator();
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(iterator0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.add(locale_Category0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.all((Matcher<?>) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(arrayDeque0);
      boolean boolean0 = abstractLambdaCollection0.all((Matcher<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(iterator0);
      abstractLambdaCollection0.setInner(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(iterator0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.setInner((Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.collection.AbstractLambdaCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      AbstractLambdaCollection<String> abstractLambdaCollection0 = new AbstractLambdaCollection<String>(treeSet0);
      String string0 = abstractLambdaCollection0.unique((Matcher<?>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(arrayDeque0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.map("[I~G)");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(604, (Comparator<? super Integer>) null);
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(priorityQueue0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      AbstractLambdaCollection<String> abstractLambdaCollection1 = new AbstractLambdaCollection<String>(linkedHashSet0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection1.index(abstractLambdaCollection0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(arrayDeque0);
      String string0 = abstractLambdaCollection0.join();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(priorityQueue0);
      LambdaMap<String, Object> lambdaMap0 = abstractLambdaCollection0.map((Converter<Object, String>) null);
      assertTrue(lambdaMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractLambdaCollection<LinkedList<String>> abstractLambdaCollection0 = new AbstractLambdaCollection<LinkedList<String>>((Iterator<? extends LinkedList<String>>) null);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.forEach((Matcher<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // forEach() is unable to introspect on an empty iterator. Use the overloaded method accepting a class instead
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(listIterator0);
      SumInteger sumInteger0 = new SumInteger((Integer) null);
      Integer integer0 = abstractLambdaCollection0.aggregate((Aggregator<Integer>) sumInteger0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Integer integer0 = new Integer(1354);
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(iterator0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.selectMin(integer0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.aggregate.ChooserOnArgument", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(iterator0);
      abstractLambdaCollection0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(serviceLoader0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.sum("o>1m @y<uZ'%@");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Iterator<String> iterator0 = arrayDeque0.descendingIterator();
      AbstractLambdaCollection<String> abstractLambdaCollection0 = new AbstractLambdaCollection<String>(iterator0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.min("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(604, (Comparator<? super Integer>) null);
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(priorityQueue0);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.setInner(priorityQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(iterator0);
      boolean boolean0 = abstractLambdaCollection0.exists((Matcher<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.noneOf(class0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      AbstractLambdaCollection<Locale.Category> abstractLambdaCollection0 = new AbstractLambdaCollection<Locale.Category>(iterator0);
      Concat concat0 = new Concat("cVO+SF.T2");
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.aggregate((Object) class0, (Aggregator<Object>) concat0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>((Iterator<? extends Integer>) null);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.forEach();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.lambdaj.Lambda", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      AbstractLambdaCollection<Object> abstractLambdaCollection0 = new AbstractLambdaCollection<Object>(arrayDeque0);
      String string0 = abstractLambdaCollection0.join("Py*lbwP}P//:<V%`9@");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AbstractLambdaCollection<AbstractLambdaCollection<Object>> abstractLambdaCollection0 = new AbstractLambdaCollection<AbstractLambdaCollection<Object>>((Iterator<? extends AbstractLambdaCollection<Object>>) null);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.selectMax("Py*lbwP}P//:<V%`9@");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.aggregate.ChooserOnArgument", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      AbstractLambdaCollection<Integer> abstractLambdaCollection0 = new AbstractLambdaCollection<Integer>(iterator0);
      String string0 = abstractLambdaCollection0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractLambdaCollection<String> abstractLambdaCollection0 = new AbstractLambdaCollection<String>((Iterator<? extends String>) null);
      // Undeclared exception!
      try { 
        abstractLambdaCollection0.max("}aybrZ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // ch/lambdaj/proxy/InvocationInterceptor
         //
         verifyException("ch.lambdaj.function.convert.ArgumentConverter", e);
      }
  }
}
