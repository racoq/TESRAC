/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 17 15:23:40 GMT 2020
 */

package ch.lambdaj.function.aggregate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.lambdaj.function.aggregate.Avg;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Avg_ESTest extends Avg_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Avg avg0 = new Avg();
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal(0, mathContext0);
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)79;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = avg0.aggregate((Number) bigDecimal0, (Number) bigInteger0);
      assertEquals((byte)79, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Avg avg0 = new Avg();
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      Number number0 = avg0.aggregate((Number) bigDecimal0, (Number) bigDecimal0);
      assertNotSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Avg avg0 = new Avg();
      Short short0 = new Short((short) (-1229));
      // Undeclared exception!
      try { 
        avg0.aggregate((Number) short0, (Number) short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unable to aggregate -1229 and -1229
         //
         verifyException("ch.lambdaj.function.aggregate.Sum", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Avg avg0 = new Avg();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = avg0.aggregate((Number) bigDecimal0, (Number) bigDecimal0);
      avg0.aggregate(number0, number0);
      Number number1 = avg0.aggregate((Iterator<? extends Number>) null);
      assertEquals(0, number1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Avg avg0 = new Avg();
      Number number0 = avg0.aggregate((Iterator<? extends Number>) null);
      BigDecimal bigDecimal0 = new BigDecimal(1487.8814);
      Number number1 = avg0.aggregate((Number) bigDecimal0, (Number) bigDecimal0);
      avg0.aggregate((Number) null, number1);
      Number number2 = avg0.aggregate(number0, number1);
      assertEquals((byte) (-97), number2.byteValue());
      
      Number number3 = avg0.aggregate((Iterator<? extends Number>) null);
      assertEquals(0, number3);
  }
}
